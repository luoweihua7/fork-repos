## Fox RouterOS Certificates Updater
:local MkcertURL "https://mkcert.org/generate/all/except/nothing";
:local LetsencryptURL "https://letsencrypt.org/certs/isrgrootx1.pem";
:local RootCaSafe "isrgrootx1_safe";
:local RootCaUnsafe "isrgrootx1_unsafe";
:local RootCaChecked;
:local GetRootCaID;
:local LenRootCaID;
:local UseCert;
:local RootCaFile;
:local RootCaFileSize;
:local MkcertFetch;
:local MkcertFile;
:local MkcertFileSize;
:local GetCertsExpired;
:local LenCertsExpired;

## Remove old certificates with less than 90 days valid
:set GetCertsExpired [/certificate find where days-valid < 90 ];
:set LenCertsExpired [:len $GetCertsExpired ];

:if ($LenCertsExpired > 0) do={

    /certificate remove $GetCertsExpired;
    :set MkcertFetch true;
    :log info ("Removed $LenCertsExpired expired certs.");

}
## Remove old certificates End

## Check If Root CA Named 'isrg*' Exists
:set GetRootCaID [/certificate find where name ~ "isrg*" ];
:set LenRootCaID [:len $GetRootCaID];

:if ($LenRootCaID = 0) do={

    :set RootCaFile $RootCaUnsafe;

} else={

    :set GetRootCaID [/certificate find where name=$RootCaUnsafe ];
    :set LenRootCaID [:len $GetRootCaID ];

    :if ($LenRootCaID > 0) do={

    :set UseCert "yes";
    :set RootCaFile $RootCaSafe;

    } else={

    :set UseCert "yes";
    :set RootCaChecked "yes";
    :log info ("Root certificate is up to date.")

    }

}
## Check Root CA END

## Process Root CA Update
:if ($UseCert = nothing) do={

    :log info ("Root certificate not detected. Updating ...");

    /tool fetch url=$LetsencryptURL check-certificate=no dst-path=$RootCaFile;
    :delay 10s;

    ## Check the size of the fetched file to validate download
    :set RootCaFileSize [/file get $RootCaFile size ];

    ## If download is successful (file size > 1000), import the certificate
    :if ($RootCaFileSize > 1000) do={

        /certificate import name=$RootCaFile passphrase="" file-name=$RootCaFile;
        :set RootCaFile $RootCaSafe;

    } else={

        /file remove $RootCaFile;
        :set MkcertFetch false;
        :log info ("Root certificate download failed. Size: $RootCaFileSize. Aborting...");

    }

}

:if ($RootCaChecked = nothing) do={

    :log info ("Unsafe root certificate detected. Updating ...");

    /tool fetch url=$LetsencryptURL check-certificate=yes dst-path=$RootCaFile;
    :delay 10s;

    ## Check the size of the fetched file to validate download
    :set RootCaFileSize [/file get $RootCaFile size ];

    ## If download is successful (file size > 1000), import the certificate
    :if ($RootCaFileSize > 1000) do={

        /certificate remove [find where name ~ "isrg*" ];
        /certificate import name=$RootCaFile passphrase="" file-name=$RootCaFile;
        :set MkcertFetch true;

    } else={

        /file remove $RootCaFile;
        :set MkcertFetch false;
        :log info ("Root certificate download failed. Size: $RootCaFileSize. Aborting...");

    }

}
## Process Root CA Update End

## Process Mkcert Update
:if ($MkcertFetch) do={

    :log info ("Mkcert certificate requires an update. Updating ...");

    :local Date [/system clock get date ];
    :set MkcertFile "mkcert_$Date";

    /tool fetch url=$MkcertURL check-certificate=yes dst-path=$MkcertFile;
    :delay 10s;

    ## Check the size of the Mkcert file
    :set MkcertFileSize [/file get $MkcertFile size ];

    ## If download is successful (file size > 200000), import the certificate
    :if ($MkcertFileSize > 200000) do={

        /certificate import name=$MkcertFile passphrase="" file-name=$MkcertFile;

    } else={

        /file remove $MkcertFile;
        :log error ("Mkcert download failed. Size: $MkcertFileSize. Aborting...");

    }

} else={

    :log info ("Mkcert certificate update skipped.")

}
## Process Mkcert Update End

## Fox RouterOS Certificates Updater End

